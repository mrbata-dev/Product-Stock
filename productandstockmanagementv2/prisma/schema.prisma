// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
 products Product[] @relation("UserProduct")

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                   String        @id @default(cuid())
  title                String
  description          String
  category             Category[]    @relation("ProductCategories")
  price                Float
  discountPercentage   Float         @default(0)
  stock                Int @default(0)
  brand                String
  sku                  String        @unique
  warrantyInformation  String?
  shippingInformation  String?
  returnPolicy         String?
  images               Image[]
  userId               String
  user                 User          @relation("UserProduct", fields: [userId], references: [id])
  sizes                ProductSize[]
  gender               String?
  metaTitle            String?
  metaDescription      String?
  metaKeywords         String?
  slug                 String?       @unique
  createAt             DateTime      @default(now())
  updateAt             DateTime      @updatedAt
}


model Category {
  id        String    @id @default(cuid())
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductCategories")
}


// model Stock {
//   id        String   @id @default(cuid())
//   quantity  Int
//   productId String
//   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }


model Image {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model ProductSize {
  id        String   @id @default(cuid())
  size      Size
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}



enum Role {
  ADMIN
  USER
  MANAGER
  STAFF
}



enum Size {
  XS
  S
  M
  L
  XL
  XXL
}
